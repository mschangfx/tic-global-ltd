-- Database Migration: Add Ranking System
-- Run this SQL in your Supabase SQL Editor

-- Step 1: Add current_rank column to users table
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS current_rank VARCHAR(20) DEFAULT 'starter';

-- Step 2: Add team_volume column to track user's team sales volume
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS team_volume DECIMAL(12, 2) DEFAULT 0.00;

-- Step 3: Add rank_updated_at column to track when rank was last calculated
ALTER TABLE users 
ADD COLUMN IF NOT EXISTS rank_updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Step 4: Add indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_current_rank ON users(current_rank);
CREATE INDEX IF NOT EXISTS idx_users_team_volume ON users(team_volume);
CREATE INDEX IF NOT EXISTS idx_users_rank_updated_at ON users(rank_updated_at);

-- Step 5: Add comments for documentation
COMMENT ON COLUMN users.current_rank IS 'Current rank of the user (starter, bronze, silver, gold, platinum, diamond)';
COMMENT ON COLUMN users.team_volume IS 'Total sales volume generated by user team';
COMMENT ON COLUMN users.rank_updated_at IS 'When the rank was last calculated and updated';

-- Step 6: Create rank_history table to track rank changes
CREATE TABLE IF NOT EXISTS rank_history (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_email VARCHAR(255) NOT NULL,
    old_rank VARCHAR(20),
    new_rank VARCHAR(20) NOT NULL,
    active_players INTEGER DEFAULT 0,
    team_volume DECIMAL(12, 2) DEFAULT 0.00,
    groups_formed INTEGER DEFAULT 0,
    rank_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    monthly_reward DECIMAL(10, 2) DEFAULT 0.00,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Foreign key constraint
    CONSTRAINT fk_rank_history_user_email FOREIGN KEY (user_email) REFERENCES users(email) ON DELETE CASCADE
);

-- Step 7: Add indexes for rank_history table
CREATE INDEX IF NOT EXISTS idx_rank_history_user_email ON rank_history(user_email);
CREATE INDEX IF NOT EXISTS idx_rank_history_new_rank ON rank_history(new_rank);
CREATE INDEX IF NOT EXISTS idx_rank_history_rank_date ON rank_history(rank_date);

-- Step 8: Add comments for rank_history table
COMMENT ON TABLE rank_history IS 'Tracks user rank changes and achievements over time';
COMMENT ON COLUMN rank_history.user_email IS 'Email of the user whose rank changed';
COMMENT ON COLUMN rank_history.old_rank IS 'Previous rank before the change';
COMMENT ON COLUMN rank_history.new_rank IS 'New rank after the change';
COMMENT ON COLUMN rank_history.active_players IS 'Number of active players at time of rank change';
COMMENT ON COLUMN rank_history.team_volume IS 'Team volume at time of rank change';
COMMENT ON COLUMN rank_history.groups_formed IS 'Number of groups formed at time of rank change';
COMMENT ON COLUMN rank_history.monthly_reward IS 'Monthly reward amount for the new rank';

-- Step 9: Create rank_achievements table for tracking specific achievements
CREATE TABLE IF NOT EXISTS rank_achievements (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_email VARCHAR(255) NOT NULL,
    achievement_type VARCHAR(50) NOT NULL, -- 'first_referral', 'bronze_rank', 'silver_rank', etc.
    achievement_name VARCHAR(100) NOT NULL,
    achievement_description TEXT,
    reward_amount DECIMAL(10, 2) DEFAULT 0.00,
    achieved_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    -- Foreign key constraint
    CONSTRAINT fk_rank_achievements_user_email FOREIGN KEY (user_email) REFERENCES users(email) ON DELETE CASCADE,
    
    -- Ensure one achievement per user per type
    CONSTRAINT unique_user_achievement UNIQUE (user_email, achievement_type)
);

-- Step 10: Add indexes for rank_achievements table
CREATE INDEX IF NOT EXISTS idx_rank_achievements_user_email ON rank_achievements(user_email);
CREATE INDEX IF NOT EXISTS idx_rank_achievements_achievement_type ON rank_achievements(achievement_type);
CREATE INDEX IF NOT EXISTS idx_rank_achievements_achieved_at ON rank_achievements(achieved_at);

-- Step 11: Create function to automatically update rank_updated_at
CREATE OR REPLACE FUNCTION update_rank_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.current_rank IS DISTINCT FROM NEW.current_rank THEN
        NEW.rank_updated_at = NOW();
        
        -- Insert into rank_history
        INSERT INTO rank_history (
            user_email,
            old_rank,
            new_rank,
            active_players,
            team_volume,
            groups_formed,
            monthly_reward
        ) VALUES (
            NEW.email,
            OLD.current_rank,
            NEW.current_rank,
            0, -- Will be updated by application logic
            NEW.team_volume,
            0, -- Will be updated by application logic
            CASE NEW.current_rank
                WHEN 'bronze' THEN 690
                WHEN 'silver' THEN 2484
                WHEN 'gold' THEN 4830
                WHEN 'platinum' THEN 8832
                WHEN 'diamond' THEN 14904
                ELSE 0
            END
        );
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Step 12: Create trigger for automatic rank tracking
DROP TRIGGER IF EXISTS trigger_update_rank_updated_at ON users;
CREATE TRIGGER trigger_update_rank_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_rank_updated_at();

-- Step 13: Create view for easy rank statistics
CREATE OR REPLACE VIEW user_rank_stats AS
SELECT 
    u.email,
    u.first_name,
    u.last_name,
    u.current_rank,
    u.team_volume,
    u.rank_updated_at,
    COUNT(DISTINCT r.email) as total_referrals,
    COUNT(DISTINCT CASE WHEN r.email_verified = true THEN r.email END) as active_referrals,
    COALESCE(rh.monthly_reward, 0) as current_monthly_reward,
    COUNT(DISTINCT ra.achievement_type) as total_achievements
FROM users u
LEFT JOIN users r ON r.referral_id = u.referral_code
LEFT JOIN rank_history rh ON rh.user_email = u.email AND rh.new_rank = u.current_rank
LEFT JOIN rank_achievements ra ON ra.user_email = u.email
GROUP BY u.email, u.first_name, u.last_name, u.current_rank, u.team_volume, u.rank_updated_at, rh.monthly_reward;

-- Step 14: Add comment for the view
COMMENT ON VIEW user_rank_stats IS 'Comprehensive view of user ranking statistics and achievements';

-- Step 15: Test the setup
SELECT 'Ranking system setup completed successfully!' as status;

-- Step 16: Verify columns exist
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'users' 
AND column_name IN ('current_rank', 'team_volume', 'rank_updated_at');

-- Step 17: Verify ranking tables exist
SELECT table_name 
FROM information_schema.tables 
WHERE table_name IN ('rank_history', 'rank_achievements');
